//
//  RegisterPopup.cpp
//  IndoGame
//
//  Created by HienDT on 8/7/14.
//
//
#include "RegisterPopup.h"
#include "LoginHandler.h"

std::string RegisterPopup::ON_CONFIRM = "confirm";
std::string RegisterPopup::ON_CANCEL = "cancel";


/*************************************************************/
/* @author Hien												 */
/* Constructor/Destructor functions							 */
/*************************************************************/
RegisterPopup::RegisterPopup()
{
}

RegisterPopup::RegisterPopup(std::string sMsr)
{
	m_sMsr = sMsr;
}

RegisterPopup::~RegisterPopup()
{
}

RegisterPopup* RegisterPopup::create()
{
	RegisterPopup* popup = new RegisterPopup();
	popup->autorelease();
	return popup;
}
RegisterPopup* RegisterPopup::create(std::string sMsr)
{
	RegisterPopup* popup = new RegisterPopup(sMsr);
	popup->autorelease();
	return popup;
}
/* END CONSTRUCTOR/DESTRUCTOR FUNCTIONS						 */


/*************************************************************/
/* @author Hien												 */
/* Start pragma onOpen/onClose functions					 */
/*************************************************************/
void RegisterPopup::onOpen()
{
	BasePopup::onOpen();
	Size deviceSize = Director::getInstance()->getWinSize();
	m_pLayout = dynamic_cast<Layout*>(cocostudio::GUIReader::getInstance()->widgetFromJsonFile("RegisterPopup.json"));
	m_pLayout->setAnchorPoint(Vec2(0.5f, 0.5f));
	m_pLayout->setPosition(Vec2(deviceSize.width/2, deviceSize.height/2));
	this->addChild(m_pLayout);

    m_bmfTitle = static_cast<TextBMFont*>(Helper::seekWidgetByName(m_pLayout, "bmfTitle"));
	m_btnCancel = static_cast<Button*>(Helper::seekWidgetByName(m_pLayout, "btnCancel"));
	m_btnCancel->addTouchEventListener(CC_CALLBACK_2(RegisterPopup::onTouchCancel, this));
	m_btnConfirm = static_cast<Button*>(Helper::seekWidgetByName(m_pLayout, "btnRegister"));
	m_btnConfirm->addTouchEventListener(CC_CALLBACK_2(RegisterPopup::onTouchConfirm, this));
	m_txtEmail = static_cast<TextField*>(Helper::seekWidgetByName(m_pLayout, "txtEmail"));
    m_txtPassword = static_cast<TextField*>(Helper::seekWidgetByName(m_pLayout, "txtPassword"));
    m_txtRePassword = static_cast<TextField*>(Helper::seekWidgetByName(m_pLayout, "txtRePassword"));
	fadeInContent();
    NotificationCenter::getInstance()->addObserver(this, callfuncO_selector(RegisterPopup::changeLanguage), EVENT_LANGUAGE_CHANGE, nullptr);
    setTextLanguage();
    setLightPosition();
}

void RegisterPopup::onClose()
{
	BasePopup::onClose();
}
/* END PRAGMA ONOPEN/ONCLOSE FUNCTIONS						 */


/*************************************************************/
/* @author Hien												 */
/* Start pragma event handlers functions					 */
/*************************************************************/
void RegisterPopup::onTouchCancel(Ref* pSender, Widget::TouchEventType type)
{
	if (type != Widget::TouchEventType::ENDED) return;

	getSpecialEventDispatcher()->dispatchCustomEvent(RegisterPopup::ON_CANCEL);
    BaseScene* scene = static_cast<BaseScene*>(Director::getInstance()->getRunningScene());
    scene->closePopup(this);
}

void RegisterPopup::onTouchConfirm(Ref* pSender, Widget::TouchEventType type)
{
	if (type != Widget::TouchEventType::ENDED) return;

	getSpecialEventDispatcher()->dispatchCustomEvent(RegisterPopup::ON_CONFIRM);
    //BaseScene* scene = static_cast<BaseScene*>(Director::getInstance()->getRunningScene());
    //scene->closePopup(this);
    LoginHandler::getInstance()->signUp(m_txtEmail->getString(), m_txtPassword->getString());
}

void RegisterPopup::changeLanguage(Ref* obj)
{
    setTextLanguage();
}

void RegisterPopup::setTextLanguage()
{
    m_bmfTitle->setString(ResourceManager::getInstance()->getTextByName(kTEXT_CONFIRM));
    m_btnCancel->setTitleText(ResourceManager::getInstance()->getTextByName(kTEXT_CANCEL));
    m_btnConfirm->setTitleText(ResourceManager::getInstance()->getTextByName(kTEXT_CONFIRM));
}
/* END PRAGMA EVENT HANDLERS FUNCTIONS					     */
